name: Build & Test

on: [push]

jobs:
  build-rust:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          # - macOS-latest
          # - windows-latest
          - ubuntu-latest
        rust:
          - stable
          # - beta
    steps:
      - uses: actions/checkout@v4
      - run: rustup update ${{ matrix.rust }} && rustup default ${{ matrix.rust }}
      - name: Versions
        run: |
          rustc --version
          cargo --version
      - name: Run `cargo check`
        run: cargo check
      - run: cargo build --verbose --release --bins --lib
      - uses: actions/upload-artifact@v4
        with:
          name: rust-${{ matrix.rust }}-build-${{ matrix.os }}
          path: target
  build-c-orig:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build
        working-directory: ./archivelib-sys-orig
        run: |
          mkdir build
          cd build
          cmake ..
          make
          rm -r CMakeFiles
      - uses: actions/upload-artifact@v4
        with:
          name: c-orig
          path: archivelib-sys-orig/build
  build-c-refactored:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build
        working-directory: ./archivelib-sys-refactored
        run: |
          mkdir build
          cd build
          cmake ..
          make
          rm -r CMakeFiles
      - uses: actions/upload-artifact@v4
        with:
          name: c-refactored
          path: archivelib-sys-refactored/build
  rust-test:
    runs-on: ${{ matrix.os }}
    needs:
      - build-rust
    strategy:
      matrix:
        os:
          # - macOS-latest
          - ubuntu-latest
        rust:
          - stable
          # - beta
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: rust-${{ matrix.rust }}-build-${{ matrix.os }}
      - run: rustup update ${{ matrix.rust }} && rustup default ${{ matrix.rust }}
      - name: Versions
        run: |
          rustc --version
          cargo --version
      - run: cargo test
  e2e-test:
    runs-on: ubuntu-latest
    needs:
      - build-rust
      - build-c-orig
      - build-c-refactored
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: rust-stable-build-ubuntu-latest
          path: target
      - uses: actions/download-artifact@v4
        with:
          name: c-orig
          path: archivelib-sys-orig/build
      - uses: actions/download-artifact@v4
        with:
          name: c-refactored
          path: archivelib-sys-refactored/build
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: install deps
        run: |
          pip install poetry
          poetry install
          poetry run pip freeze
      - name: Check PyTest setup
        env:
          ALTEST_NO_BUILD: 1
        run: poetry run pytest --verbose ./e2e_test/test_system.py
      - name: run e2e tests
        env:
          ALTEST_NO_BUILD: 1
        run: poetry run pytest --maxfail=20 --verbose ./e2e_test/
